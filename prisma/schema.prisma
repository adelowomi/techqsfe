// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    password      String?
    role          Role      @default(HOST)
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
    seasons       Season[]
    attempts      Attempt[]
}

model VerificationToken {
    my_row_id  BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Season {
    id          String   @id @default(cuid())
    name        String
    description String?
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    
    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String
    
    cards     Card[]
    attempts  Attempt[]
    
    @@index([createdAt])
}

model Card {
    id            String     @id @default(cuid())
    cardNumber    Int        // 1-52 for each difficulty in a season
    question      String     @db.Text
    correctAnswer String     @db.Text
    difficulty    Difficulty
    usageCount    Int        @default(0)
    createdAt     DateTime   @default(now())
    updatedAt     DateTime   @updatedAt
    lastUsed      DateTime?
    
    season   Season @relation(fields: [seasonId], references: [id], onDelete: Cascade)
    seasonId String
    
    attempts Attempt[]
    
    @@unique([seasonId, difficulty, cardNumber])
    @@index([seasonId, difficulty])
    @@index([usageCount])
}

model Attempt {
    id             String   @id @default(cuid())
    contestantName String
    givenAnswer    String   @db.Text
    isCorrect      Boolean
    attemptedAt    DateTime @default(now())
    
    card   Card   @relation(fields: [cardId], references: [id], onDelete: Cascade)
    cardId String
    
    season   Season @relation(fields: [seasonId], references: [id], onDelete: Cascade)
    seasonId String
    
    recordedBy   User   @relation(fields: [recordedById], references: [id])
    recordedById String
    
    @@index([attemptedAt])
    @@index([seasonId])
    @@index([contestantName])
}

enum Difficulty {
    EASY
    MEDIUM
    HARD
}

enum Role {
    HOST
    PRODUCER
    ADMIN
}
